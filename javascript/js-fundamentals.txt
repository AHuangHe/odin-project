Fundamentals I
- We can include JavaScript code in an html file inside the <script></script> section
- console.log() is the command to print something to the developer console in your browser
- Another way to include JavaScript in a webpage is through an external script
  - <script src="javascript.js"></script>

- Variables
  - We can declare variables in three var, let, and const
  - Used to be only var, but now let and const are better ways to declare variables
  - We can declare multiple variables in one line, but for the sake of readability, do it line by line
  - We can also declare two variables and copy data from one into the other
  - Declaring a variable twice triggers an error
  - Variable naming limitations:
    - name must contain only letters, digits, or the symbols $ and _
    - the first character must not be a digit
    - camelCase is commonly used
    - case matters
  - Constants
    - We can declare unchanging variables with const
    - Uppercase Constants
      - Use all capital letters and underscores for difficult-to-remember values
      - capital-named constants are only used as aliases for "hard-coded" values
    - For constants evaluated in run-time, use the regular naming system
  - Use human-readable names for variables
  - Make names maximally descriptive and concise

- Numbers
  - Operations
    - Addition: +
    - Subtraction: -
    - Multiplication: *
    - Exponentiation: **
    - Division: /
    - Modulus: %
    - Increment: ++
    - Decrement: --
  - Operator Precedence
    - PEMDAS
  - Special values (of type number)
    - NaN: Not a Number
    - Infinity: value returned if a number calculated is outside the largest possible number
  - Different Bases
    - 0x___: Hex number
    - We can use the .toString(base) method to output numbers from base 2 to base 36
      - myNumber.toString(base);
  - Numbers as Objects
    - We can define numbers as objects (instead of literals) by using the keyword new:
      - let y - new Number(123);
    - However, number objects can produce unexpected results, so don't use them
  - Comparison operators:
    - The == operator performs a loose equality comparison that performs type coercion if necessary to make the comparison possible
    - The === operator performs a strict equality comparison (operands need to have the same type and value to return true)

Fundamentals II
- There are eight main data types in JavaScript:
  - number, bigInt, string, boolean, null, undefined, object, and symbol

- Strings
  - strings are immutable (they can only be replaced)
  - All the methods below return a new string, they don't modify the original one
  - Common String methods:
    - length
    - slice(start, end), substring(start, end), substr(start, length)
      - slice and substring are similar, but substring treats all negative values are 0
    - replace(toreplace, replacewith) and replaceAll()
      - only replaces the first match and is case sensitive
      - we can use regexes /g (for multiple matches) /i for any casing
        - regexes are written without quotes (i.e. "hello" -> /hello/i)
    - toUpperCase() and toLowerCase()
    - concat(string1, string2) same as using + operator for strings
    - trim()
      - removes whitespace from both sides of a string
      - trimStart() and trimEnd() have also been added recently
    - padStart() and padEnd()
      - we can add padding with length and a specific char (num, "char")
      - note that these are string methods and not number methods
    - charAt(position), charCodeAt(position), property access [ ]
      - charCodeAt returns the unicode (UTF-16) of the character at the position
      - property access might be a little unpredictable
        - makes strings look like arrays
        - returns undefined if no character is found (charAt returns the empty string)
        - it is read only
    - split()
      - converts a string to an array

- Conditionals
  - if, else, else if, and switch
  - syntax:
    - if (condition) { // block of code } 
    - else if (condition) { // block of code }
    - else { // block of code }
  - Operators
    - OR: ||
      - Evaluates operands from left to right
      - For each operand, converts it to boolean
      - If the result is true, stops and returns the original value of that operand
      - If all operands have been evaluated (all false), returns the last operand
    - AND: &&
      - Evaluates operands from left to right
      - For each operand, converts it to boolean
      - If the result is false, stops and returns the original value of that operand
      - If all operands have been evaluated (all true), returns the last operand
      - * It has a higher precedence than OR *
      - * for the case 2 && 3, it will return 3 (the higher value)
    - NOT: !
      - Converts the operand to boolean type
      - Returns the inverse value
      - We can use double NOT (!!) to convert a value to boolean type

  - * Any value that is not false, undefined, null, 0, NaN, or an empty string ('') 
      actually returns true when tested as a conditional statement *
  - Switch statement
    - Good for cases where you just want to set a variable to a certain choice of value
      and print out a particular statement depending on a condition
    - switch (expression) {
        case choice1:
          // code
          break;
        case choice2:
          // code
          break;
        ...
        default:
          // run this if no matches
          break;
      }
  - Ternary operator
    - tests a condition and returns one value/expression if true and another if false
    - useful for some situations and takes up less code than if...else
    - i.e. condition ? run this code if true : run this code otherwise

    